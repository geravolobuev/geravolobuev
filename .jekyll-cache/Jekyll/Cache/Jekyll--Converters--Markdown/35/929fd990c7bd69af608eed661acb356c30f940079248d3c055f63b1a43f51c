I"ö2<h2 id="–º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å-–≤-ios">–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –≤ iOS</h2>

<p>–ö—É—Ä—Å –Ω–µ–ø–ª–æ—Ö–æ–π. –û–±–∑–æ—Ä–Ω—ã–π. –•–æ—Ç—è, –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–º –ø–ª–∞–Ω–µ, —É—Å—Ç—É–ø–∞–µ—Ç –∫—É—Ä—Å–∞–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ø–Ω–¥–µ–∫—Å–∞. –°–ø–∏–∫–µ—Ä —É—Å—Ç–∞–≤—à–∏–º –≥–æ–ª–æ—Å–æ–º —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–º—É, —á–∞—Å—Ç–æ –∫–∞–∫ –±—É–¥—Ç–æ ¬´—Å –±—É–º–∞–∂–∫–∏¬ª. –¢–µ—Å—Ç—ã –∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ø–∞–¥–∞—é—Ç—Å—è —Å –æ—à–∏–±–∫–∞–º–∏, –Ω–µ –æ—á–µ–Ω—å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞–º–∏. –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –∫—É—Ä—Å–∞ –≤—ã–¥–∞–µ—Ç—Å—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.</p>

<p>–ù–µ–±–æ–ª—å—à–æ–π –∫–æ–Ω—Å–ø–µ–∫—Ç –ø–æ –ª–µ–∫—Ü–∏—è–º.</p>

<h3 id="multithreading">Multithreading</h3>

<p>–ì–ª–∞–≤–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Ç–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å—Ç–∞—Ä—Ç—É–µ—Ç –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –í—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º (UI) –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –Ω–µ–º.</p>

<p>–û—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–º–∏—Ç–∏–≤–æ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Ç–æ–∫ (thread)</p>

<p><strong>Thread</strong> –∫–ª–∞—Å—Å - objC –æ–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ unix –ø–æ—Ç–æ–∫–∞–º–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">var</span> <span class="nv">nsthread</span> <span class="o">=</span> <span class="kt">Thread</span><span class="p">(</span><span class="nv">block</span><span class="p">:</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Test 2"</span><span class="p">)</span>
<span class="p">})</span>
<span class="n">nsthread</span><span class="o">.</span><span class="nf">start</span><span class="p">()</span></code></pre></figure>

<p><strong>Quality of Service</strong> - –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∞–º. 
–°—É—â–µ—Å—Ç–≤—É–µ—Ç —á–µ—Ç—ã—Ä–µ —Ç–∏–ø–∞ QoS:<br />
<strong>userInteractive</strong> - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–¥–∞—á –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ. –ê–Ω–∏–º–∞—Ü–∏–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.<br />
<strong>userInitiated</strong> - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –∏ –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –∫–ª–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.<br />
<strong>unility</strong> - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö.<br />
<strong>background</strong> - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–¥–∞—á, –Ω–µ–≤–∏–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è, –±–µ–∫–∞–ø. <br />
–¢–∞–∫–∂–µ –µ—Å—Ç—å —Ç–∏–ø default. –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–∞–≤–∏—Ç—å—Å—è default.</p>

<p>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—à—É—Ç:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="n">thread</span><span class="o">.</span><span class="n">qualityOfService</span> <span class="o">=</span> <span class="o">.</span><span class="n">userInitiated</span></code></pre></figure>

<p><em>–ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–∑–Ω–∞—á–∞–µ—Ç –ª–∏—à—å —Ç–æ, —á—Ç–æ –ø–æ—Ç–æ–∫—É –±—É–¥–µ—Ç —á–∞—â–µ –¥–∞–≤–∞—Ç—å—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è, –Ω–æ —ç—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –µ–º—É –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –ø–µ—Ä–≤—ã–º</em></p>

<p><strong>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</strong> - –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–µ—Å–ø–µ—á–∏—Ç –¥–æ—Å—Ç—É–ø, –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ –∫ –æ–¥–Ω–æ–º—É —Ä–µ—Å—É—Ä—Å—É. –î–ª—è —ç—Ç–æ–≥–æ –µ—Å—Ç—å –¥–≤–∞ –ø—Ä–∏–º–∏—Ç–∏–≤–∞ - mutex –∏ semaphore. 
–ü–µ—Ä–≤—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ä–µ—Å—É—Ä—Å—É —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–º—É –ø–æ—Ç–æ–∫—É, —Å–µ–º–∞—Ñ–æ—Ä –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –Ω-–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—Ç–æ–∫–æ–≤.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">lock</span> <span class="o">=</span> <span class="kt">NSLock</span><span class="p">()</span>
<span class="kd">func</span> <span class="nf">test</span><span class="p">(</span><span class="kt">I</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">lock</span><span class="o">.</span><span class="nf">lock</span><span class="p">()</span> <span class="c1">// –∑–∞—Ö–≤–∞—Ç —Ä–µ—Å—É—Ä—Å–∞ </span>
	<span class="c1">// do somth</span>
	<span class="n">lock</span><span class="o">.</span><span class="nf">unlock</span><span class="p">()</span> <span class="c1">// –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞</span>
<span class="p">}</span></code></pre></figure>

<p>–ü–æ–¥ –∑–∞—Ö–≤–∞—Ç–æ–º —Ä–µ—Å—É—Ä—Å–∞ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, —á—Ç–æ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ä–µ—Å—É—Ä—Å—É, –Ω–∏–∫–∞–∫–æ–π –¥—Ä—É–≥–æ–π –ø–æ—Ç–æ–∫ –Ω–µ —Å–º–æ–∂–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Ä–µ—Å—É—Ä—Å–æ–º –∏ –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å –º–æ–º–µ–Ω—Ç–∞, –∫–æ–≥–¥–∞ –ø–µ—Ä–≤—ã–π –æ—Å–≤–æ–±–æ–¥–∏—Ç —Ä–µ—Å—É—Ä—Å.</p>

<p>–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π mutex - –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—Ç–æ–∫—É –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–∑ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Ä–µ—Å—É—Ä—Å:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">lock</span> <span class="o">=</span> <span class="kt">NSRecursiveLock</span><span class="p">()</span>
<span class="kd">func</span> <span class="nf">test1</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">lock</span><span class="o">.</span><span class="nf">lock</span><span class="p">()</span>
	<span class="nf">test2</span><span class="p">()</span>
	<span class="n">lock</span><span class="o">.</span><span class="nf">unlock</span><span class="p">()</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">test2</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">lock</span><span class="o">.</span><span class="nf">lock</span><span class="p">()</span>
	<span class="c1">// do somth</span>
	<span class="n">lock</span><span class="o">.</span><span class="nf">unlock</span><span class="p">()</span>
<span class="p">}</span></code></pre></figure>

<p><em>–ó–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∞—è <strong>condition</strong> –Ω–µ –Ω–∞—á–Ω–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç —Å–∏–≥–Ω–∞–ª (signal) –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ç–æ–∫–∞:</em></p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">private</span> <span class="k">let</span> <span class="nv">condition</span> <span class="o">=</span> <span class="kt">NSCondition</span><span class="p">()</span>
<span class="kd">private</span> <span class="k">var</span> <span class="nv">check</span><span class="p">:</span> <span class="kt">Bool</span> <span class="o">=</span> <span class="kc">false</span>
 
<span class="kd">func</span> <span class="nf">test1</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">condition</span><span class="o">.</span><span class="nf">lock</span><span class="p">()</span>
    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">check</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">condition</span><span class="o">.</span><span class="nf">wait</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"test"</span><span class="p">)</span>
    <span class="n">condition</span><span class="o">.</span><span class="nf">unlock</span><span class="p">()</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">test2</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">condition</span><span class="o">.</span><span class="nf">lock</span><span class="p">()</span>
    <span class="n">check</span> <span class="o">=</span> <span class="kc">true</span>
    <span class="n">condition</span><span class="o">.</span><span class="nf">unlock</span><span class="p">()</span>
<span class="p">}</span>
<span class="k">let</span> <span class="nv">thread1</span> <span class="o">=</span> <span class="kt">Thread</span> <span class="p">{</span>
    <span class="nf">test1</span><span class="p">()</span>
<span class="p">}</span>
<span class="n">thread1</span><span class="o">.</span><span class="nf">start</span><span class="p">()</span>
<span class="k">let</span> <span class="nv">thread2</span> <span class="o">=</span> <span class="kt">Thread</span> <span class="p">{</span>
    <span class="nf">test2</span><span class="p">()</span>
<span class="p">}</span>
<span class="n">thread2</span><span class="o">.</span><span class="nf">start</span><span class="p">()</span></code></pre></figure>

<p><strong>Context switch</strong> - –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏. –≠—Ç–æ –¥–æ–≤–æ–ª—å–Ω–æ ¬´–¥–æ—Ä–æ–≥–æ—Å—Ç–æ—è—â–∞—è¬ª –æ–ø–µ—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã. –î–ª—è –º—å—é—Ç–µ–∫—Å–æ–≤ –µ—Å—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ. –í —Å–ª—É—á–∞–µ —Å unfair lock –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–¥–∞–≤–∞—Ç—å—Å—è —Ç–æ–º—É –ø–æ—Ç–æ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Ä–µ—Å—É—Ä—Å—É —á–∞—â–µ.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">private</span> <span class="k">var</span> <span class="nv">lock</span> <span class="o">=</span> <span class="nf">os_unfair_lock_s</span><span class="p">()</span>
<span class="kd">func</span> <span class="nf">test</span><span class="p">(</span><span class="nv">i</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
   <span class="nf">os_unfair_lock_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">)</span>
   <span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
   <span class="nf">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
   <span class="nf">os_unfair_lock_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>–¢–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ—Ç–æ–∫–∞–º–∏:<br />
<strong>Deadlock</strong> - –°–æ—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ (–ø–æ—Ç–æ–∫) –∂–¥–µ—Ç –∫–æ–≥–¥–∞ –¥—Ä—É–≥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ ¬´–æ—Ç–ø—É—Å—Ç–∏—Ç¬ª lock.  –¢.–µ. –ø–æ—Ç–æ–∫–∏ –ø—ã—Ç–∞—é—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —É–∂–µ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º, –≤ —Å–ª–µ–¥—Å—Ç–≤–∏–∏ —á–µ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–∏—Å–∞–µ—Ç.<br />
<strong>LiveLock</strong> - –¢–æ–∂–µ, —á—Ç–æ –∏ deadlock, —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã—Ö –≤ –¥–µ–π—Å—Ç–≤–∏—è—Ö –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –º–µ–Ω—è—é—Ç—Å—è, –Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç. –û–±–∞ –ø–æ—Ç–æ–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±–µ—Å–ø–æ–ª–µ–∑–Ω—É—é —Ä–∞–±–æ—Ç—É.<br />
<strong>Priority Inversion</strong> - –ù–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ—Ç–æ–∫ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Å—É—Ä—Å, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –∂–¥—É—Ç.</p>

<h3 id="–±–∏–±–ª–∏–æ—Ç–µ–∫–∞-grand-central-dispatch">–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Grand Central Dispatch</h3>

<p>–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–º–∏—Ç–∏–≤ GCD - <strong>–æ—á–µ—Ä–µ–¥—å (Queue)</strong>. –ï—Å—Ç—å –¥–≤–∞ —Ç–∏–ø–∞:</p>
<ol>
  <li><strong>Serial</strong> - –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.</li>
  <li><strong>Concurrent</strong> - –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.</li>
</ol>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">serialQueue</span> <span class="o">=</span> <span class="kt">DispatchQueue</span><span class="p">(</span><span class="nv">label</span><span class="p">:</span> <span class="err">¬´</span><span class="n">serialTest</span><span class="err">¬ª</span><span class="p">)</span>
<span class="k">let</span> <span class="nv">concurrentQueue</span> <span class="o">=</span> <span class="kt">DispatchQueue</span><span class="p">(</span>
<span class="nv">label</span><span class="p">:</span> <span class="err">¬´</span><span class="n">concurrentTest</span><span class="err">¬ª</span><span class="p">,</span> <span class="nv">attributes</span><span class="p">:</span> <span class="o">.</span><span class="n">concurrent</span><span class="p">)</span></code></pre></figure>

:ET