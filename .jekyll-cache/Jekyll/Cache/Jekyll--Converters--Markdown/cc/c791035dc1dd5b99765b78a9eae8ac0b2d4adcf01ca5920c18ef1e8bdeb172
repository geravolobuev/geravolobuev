I"p:<h2 id="quality-assurance-course"><span class="mark">Quality Assurance course</span></h2>

<p><strong>Тестировщик</strong> – обнаруживает проблемы, баги.</p>

<p><strong>Тестирование ПО</strong> – процесс исследования, испытания ПО, имеющий целью проверку соответствия между реальным поведением программы и её ожидаемым поведением на конечном наборе тестов, выбранным определенным образом.</p>

<p>Цели: повышение качества ПО, предоставление инфо о качестве заказчику.
Задача: поиск дефектов.</p>

<p><strong>Баг или дефект</strong> – отклонение фактического результата от ожидаемого, изъян в компоненте или системе, который может привести компонент или систему к невозможности выполнить требуемую функцию.</p>

<p>Жизненный цикл бага:</p>
<ol>
  <li>Оформить отчет о дефекте (баг-репорт)</li>
  <li>Программист рассматривает проблему</li>
  <li>Если проблема воспроизводится - исправить и загрузить, перейти к шагу 4е. Если нет, вернуть тестировщику на повторное рассмотрение.</li>
  <li>Регрессионное тестирование тестировщиком</li>
  <li>Если баг воспроизводится вернуть кодеру, если нет, закрыть.</li>
</ol>

<p><strong>Баг репорт</strong> – технический документ, описывающий ситуацию или последовательность действий, приведшую к некорректной работе объекта тестирования, с указанием причин и ожидаемого результата. 
Основные принципы:</p>
<ul>
  <li>Должен быть написан в наст. Вр.</li>
  <li>Summary, expected result и actual result должны отвечать на вопросы: Где? Что? Когда?</li>
  <li>Поле STR должно быть обезличенным</li>
  <li>Баг-репорт должен быть написан грамотно и понятно</li>
  <li>Текст репорта должен быть нейтральным</li>
  <li>Не должно присутствовать слов: неправильно, некорректно, неверно</li>
</ul>

<p>Основные атрибуты баг-репорта:</p>
<ul>
  <li>Summary (Тема)</li>
  <li>Description (Подробное описание)</li>
  <li>Actual/Expected result (Результаты)</li>
  <li>Steps To Reproduce, STR (Шаги для воспроизведения)</li>
  <li>Severity (Критичность дефекта)*</li>
  <li>Priority (Приоритет дефекта)</li>
  <li>Attachments (Вложения)</li>
</ul>

<p>*Критичность (severity) может быть нескольких типов:</p>
<ol>
  <li>Блокирующая (Blocker) – дальнейшая работа с системой или ее ключевыми функциями невозможна.</li>
  <li>Критическая (critical) – дальнейшая работа с системой или ее ключевыми функциями становится невозможна, однако имеются альтернативные приемлемые методы достижения конечного результата.</li>
  <li>Значительная (major) – дефект, который не приводит к прекращению работы системы, однако вызывает ошибочные, неполные или непоследовательные расчеты или функционирование системы.</li>
  <li>Незначительная (minor) – ошибка не приводит к прекращению работы системы, не ухудшает удобство пользования системой, но является заметной для пользователя.</li>
  <li>Тривиальная (trivial) – ошибка, не оказывающая никакого влияния на общее качество продукта, практически незаметна для пользователя.</li>
</ol>

<p><strong>Алгоритм создания баг-репорта</strong></p>
<ul>
  <li>Понять суть проблемы</li>
  <li>Вопроизвести дефект</li>
  <li>Проверить наличие описания найденного вами дефекта в системе управления дефектами</li>
  <li>Сформулировать суть проблемы в виде «что сделали, что получили, что ожидали получить»</li>
  <li>Заполнить поля отчета, начиная с названия баг-репорта</li>
  <li>После заполнения всех полей внимательно перечитать исправив неточности и добавив породности.</li>
</ul>

<p><strong>Чек-лист</strong> – это список, содержащий ряд необходимый проверок во время тестирования ПО.</p>

<p>Основные атрибуты:</p>
<ul>
  <li>Название проверки;</li>
  <li>Статус проверки;</li>
  <li>Ссылка на баг;</li>
  <li>Название устройства/браузера/версии;</li>
  <li>Фамилия разработчика.</li>
</ul>

<p>Правила составления:</p>
<ul>
  <li>Один пункт – одна операция: однозначные автоматные и полные операции.</li>
  <li>Пункты начинаются с существительного: придерживаться унифицированной формы.</li>
  <li>Составление чек-листа по уровням детализации: лучше составлять тесты в том виде, который будет последовательным исходя из логики использования функционала.</li>
</ul>

<p><strong>Тест-план</strong> – это документ, описывающий весь объем работ по тестированию. Отвечает на следующие вопросы:</p>
<ul>
  <li>Что надо тестировать?</li>
  <li>Что будете тестировать?</li>
  <li>Как будете тестировать?</li>
  <li>Когда будете тестировать?</li>
</ul>

<p><strong>Тест-кейс</strong> – тестовый артефакт, суть которого заключается в выполнении некоторого количества действий, и/или условий, необходимый для проверки определенной функциональности разрабатываемой программной системы.</p>

<p>Основные атрибуты тест-кейса:</p>
<ul>
  <li>Уникальный идентификатор тест-кейса;</li>
  <li>Название;</li>
  <li>Предусловия;</li>
  <li>Шаги;</li>
  <li>Ожидаемый результат;</li>
  <li>Результат проверки.</li>
</ul>

<p>Набор тест-кейсов называется <strong>тестовым набором (test suite)</strong></p>

<p>Что не должно быть в тест-кейсе:</p>
<ul>
  <li>Зависимостей от других тест-кейсов;</li>
  <li>Нечеткой формулировки шагов или ожидаемого результата;</li>
  <li>Отсутствия необходимой для прохождения тест-кейса инфы;</li>
  <li>Излишней детализации.</li>
</ul>

<h3 id="принципы-тестирования">Принципы тестирования:</h3>

<ol>
  <li>Тестирование демонстрирует наличие дефектов.</li>
  <li>Исчерпывающее тестирование невозможно.</li>
  <li>Ранее тестирование – усилия тестирования должны быть сосредоточенны пропорционально ожидаемой, а позже и реальной плотности дефектов по модулям.</li>
  <li>Скопление дефектов.</li>
  <li>«Парадокс пестицида» – если одни и те же тесты прогоняются много раз, в конечном счете этот набор тестовых сценариев перестанет находить новые дефекты.</li>
  <li>Тестирование зависит от контекста.</li>
  <li>Отсутствие ошибок не означает, что система готова к использованию.</li>
</ol>

<p><strong>Критерии начала и окончания тестирования</strong>
start:</p>
<ul>
  <li>Готовность проекта и модулей по отдельности.</li>
  <li>Законченность разработки требуемого функционала</li>
  <li>Наличие необходимой документации<br />
end:</li>
  <li>Полное тестовое покрытие</li>
  <li>Результаты тестирования удовлетворяют критериям качества продукта</li>
  <li>Проверка исправления найденных багов</li>
</ul>

<p><strong>Классификация тестирования</strong></p>
<ol>
  <li>По знанию внутренней системы:
    <ul>
      <li>«Черный ящик» (поведенческое тестирование) – метод, не предполагающий знание внутренней системы продукта.</li>
      <li>«Белый ящик» – анализ внутренней структуры компонента или системы.</li>
      <li>«Серый ящик» – комбинация черного и белого ящика.</li>
    </ul>
  </li>
  <li><strong>Функциональное</strong> тестирование – проверка соответствия функциональных требований ПО к его реальным характеристикам. Функции системы дают ответ на вопрос «что делает система».</li>
  <li><strong>Нефункциональное</strong> тестирование – выполняется для оценки таких характеристик системы и программного обеспечения, как удобство использования, производительность или безопасность. Нефункциональное тестирование – это проверка того, «насколько хорошо работает система».</li>
  <li>По времени проведения тестирования:
    <ul>
      <li><strong>Smoke</strong> тестирование – исполняется с целью проверить, что критические важные функциональные части работают как положенно. Перепроверка не является частью smoke. Выполняется перед регрессионным</li>
      <li><strong>Регрессионное</strong> тестирование – подтверждает что свежие изменения в коде или приложении в целом не оказали негативного влияния на уже существующую функциональность/набор функций. Перепроверка дефектов также не является целью regression. Выполняется при любой модификации или изменениях в уже существующем проекте.</li>
    </ul>
  </li>
  <li>По критерию «позитивности» сценариев:
    <ul>
      <li><strong>Позитивное</strong> –  тестирование с применением сценариев, соответствующих нормальному (штатному, ожидаемому) поведению системы.</li>
      <li><strong>Негативное</strong> – тестирование, в рамках которого применяются сценарии, которые соответствуют внештатному поведению тестируемой системы. Например исключительные ситуации, неверные данные.</li>
    </ul>
  </li>
  <li>По степени изолированности тестируемых компонентов или уровням тестирования:
    <ul>
      <li><strong>Компонентное</strong> тестирование (модульное, unit testing) – тестирование каждой атомарной функциональности приложения отдельно, в искусственно созданной среде.</li>
      <li><strong>Интеграционное</strong> – это тестирование на уровне двух или больше компонентов. И
это тестирование взаимодействия этих двух или больше компонентов. Тестируются уже проверенные ранее модули.</li>
      <li><strong>Системное (end-to-end)</strong> – выполняется на полной, интегрированной системе, с целью проверки соответствия системы исходным требованиям, как функциональным, так и не функциональным. Выполняется методом «черного ящика».</li>
    </ul>
  </li>
</ol>
:ET