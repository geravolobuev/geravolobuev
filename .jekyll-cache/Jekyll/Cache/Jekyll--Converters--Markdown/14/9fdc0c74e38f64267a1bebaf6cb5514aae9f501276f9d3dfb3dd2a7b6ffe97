I"Ú≠<h2 id="–∫—É—Ä—Å-–º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å-–≤-ios">–ö—É—Ä—Å ‚Äú–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –≤ iOS‚Äù</h2>

<p>–ö—É—Ä—Å –Ω–µ–ø–ª–æ—Ö–æ–π. –û–±–∑–æ—Ä–Ω—ã–π. –•–æ—Ç—è, –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–º –ø–ª–∞–Ω–µ, —É—Å—Ç—É–ø–∞–µ—Ç –∫—É—Ä—Å–∞–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ø–Ω–¥–µ–∫—Å–∞. –°–ø–∏–∫–µ—Ä —É—Å—Ç–∞–≤—à–∏–º –≥–æ–ª–æ—Å–æ–º —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–º—É, —á–∞—Å—Ç–æ –∫–∞–∫ –±—É–¥—Ç–æ ¬´—Å –±—É–º–∞–∂–∫–∏¬ª. –¢–µ—Å—Ç—ã –∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ø–∞–¥–∞—é—Ç—Å—è —Å –æ—à–∏–±–∫–∞–º–∏, –Ω–µ –æ—á–µ–Ω—å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞–º–∏. –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –∫—É—Ä—Å–∞ –≤—ã–¥–∞–µ—Ç—Å—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.</p>

<p>–ù–µ–±–æ–ª—å—à–æ–π –∫–æ–Ω—Å–ø–µ–∫—Ç –ø–æ –ª–µ–∫—Ü–∏—è–º.</p>

<h3 id="multithreading">Multithreading</h3>

<p>–ì–ª–∞–≤–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Ç–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å—Ç–∞—Ä—Ç—É–µ—Ç –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –í—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º (UI) –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –Ω–µ–º.</p>

<p>–û—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–º–∏—Ç–∏–≤–æ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Ç–æ–∫ (thread)</p>

<p><strong>Thread</strong> –∫–ª–∞—Å—Å - objC –æ–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ unix –ø–æ—Ç–æ–∫–∞–º–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">var</span> <span class="nv">nsthread</span> <span class="o">=</span> <span class="kt">Thread</span><span class="p">(</span><span class="nv">block</span><span class="p">:</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Test 2"</span><span class="p">)</span>
<span class="p">})</span>
<span class="n">nsthread</span><span class="o">.</span><span class="nf">start</span><span class="p">()</span></code></pre></figure>

<p><strong>Quality of Service</strong> - –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∞–º. 
–°—É—â–µ—Å—Ç–≤—É–µ—Ç —á–µ—Ç—ã—Ä–µ —Ç–∏–ø–∞ QoS:<br />
<strong>userInteractive</strong> - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–¥–∞—á –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ. –ê–Ω–∏–º–∞—Ü–∏–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.<br />
<strong>userInitiated</strong> - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –∏ –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –∫–ª–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.<br />
<strong>unility</strong> - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö.<br />
<strong>background</strong> - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–¥–∞—á, –Ω–µ–≤–∏–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è, –±–µ–∫–∞–ø. <br />
–¢–∞–∫–∂–µ –µ—Å—Ç—å —Ç–∏–ø default. –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–∞–≤–∏—Ç—å—Å—è default.</p>

<p>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—à—É—Ç:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="n">thread</span><span class="o">.</span><span class="n">qualityOfService</span> <span class="o">=</span> <span class="o">.</span><span class="n">userInitiated</span></code></pre></figure>

<p><em>–ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–∑–Ω–∞—á–∞–µ—Ç –ª–∏—à—å —Ç–æ, —á—Ç–æ –ø–æ—Ç–æ–∫—É –±—É–¥–µ—Ç —á–∞—â–µ –¥–∞–≤–∞—Ç—å—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è, –Ω–æ —ç—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –µ–º—É –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –ø–µ—Ä–≤—ã–º</em></p>

<p><strong>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</strong> - –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–µ—Å–ø–µ—á–∏—Ç –¥–æ—Å—Ç—É–ø, –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ –∫ –æ–¥–Ω–æ–º—É —Ä–µ—Å—É—Ä—Å—É. –î–ª—è —ç—Ç–æ–≥–æ –µ—Å—Ç—å –¥–≤–∞ –ø—Ä–∏–º–∏—Ç–∏–≤–∞ - mutex –∏ semaphore. 
–ü–µ—Ä–≤—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ä–µ—Å—É—Ä—Å—É —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–º—É –ø–æ—Ç–æ–∫—É, —Å–µ–º–∞—Ñ–æ—Ä –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –Ω-–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—Ç–æ–∫–æ–≤.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">lock</span> <span class="o">=</span> <span class="kt">NSLock</span><span class="p">()</span>
<span class="kd">func</span> <span class="nf">test</span><span class="p">(</span><span class="kt">I</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">lock</span><span class="o">.</span><span class="nf">lock</span><span class="p">()</span> <span class="c1">// –∑–∞—Ö–≤–∞—Ç —Ä–µ—Å—É—Ä—Å–∞ </span>
	<span class="c1">// do somth</span>
	<span class="n">lock</span><span class="o">.</span><span class="nf">unlock</span><span class="p">()</span> <span class="c1">// –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞</span>
<span class="p">}</span></code></pre></figure>

<p>–ü–æ–¥ –∑–∞—Ö–≤–∞—Ç–æ–º —Ä–µ—Å—É—Ä—Å–∞ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, —á—Ç–æ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ä–µ—Å—É—Ä—Å—É, –Ω–∏–∫–∞–∫–æ–π –¥—Ä—É–≥–æ–π –ø–æ—Ç–æ–∫ –Ω–µ —Å–º–æ–∂–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Ä–µ—Å—É—Ä—Å–æ–º –∏ –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å –º–æ–º–µ–Ω—Ç–∞, –∫–æ–≥–¥–∞ –ø–µ—Ä–≤—ã–π –æ—Å–≤–æ–±–æ–¥–∏—Ç —Ä–µ—Å—É—Ä—Å.</p>

<p>–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π mutex - –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—Ç–æ–∫—É –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–∑ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Ä–µ—Å—É—Ä—Å:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">lock</span> <span class="o">=</span> <span class="kt">NSRecursiveLock</span><span class="p">()</span>
<span class="kd">func</span> <span class="nf">test1</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">lock</span><span class="o">.</span><span class="nf">lock</span><span class="p">()</span>
	<span class="nf">test2</span><span class="p">()</span>
	<span class="n">lock</span><span class="o">.</span><span class="nf">unlock</span><span class="p">()</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">test2</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">lock</span><span class="o">.</span><span class="nf">lock</span><span class="p">()</span>
	<span class="c1">// do somth</span>
	<span class="n">lock</span><span class="o">.</span><span class="nf">unlock</span><span class="p">()</span>
<span class="p">}</span></code></pre></figure>

<p><em>–ó–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∞—è <strong>condition</strong> –Ω–µ –Ω–∞—á–Ω–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç —Å–∏–≥–Ω–∞–ª (signal) –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ç–æ–∫–∞:</em></p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">private</span> <span class="k">let</span> <span class="nv">condition</span> <span class="o">=</span> <span class="kt">NSCondition</span><span class="p">()</span>
<span class="kd">private</span> <span class="k">var</span> <span class="nv">check</span><span class="p">:</span> <span class="kt">Bool</span> <span class="o">=</span> <span class="kc">false</span>
 
<span class="kd">func</span> <span class="nf">test1</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">condition</span><span class="o">.</span><span class="nf">lock</span><span class="p">()</span>
    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">check</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">condition</span><span class="o">.</span><span class="nf">wait</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"test"</span><span class="p">)</span>
    <span class="n">condition</span><span class="o">.</span><span class="nf">unlock</span><span class="p">()</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">test2</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">condition</span><span class="o">.</span><span class="nf">lock</span><span class="p">()</span>
    <span class="n">check</span> <span class="o">=</span> <span class="kc">true</span>
    <span class="n">condition</span><span class="o">.</span><span class="nf">unlock</span><span class="p">()</span>
<span class="p">}</span>
<span class="k">let</span> <span class="nv">thread1</span> <span class="o">=</span> <span class="kt">Thread</span> <span class="p">{</span>
    <span class="nf">test1</span><span class="p">()</span>
<span class="p">}</span>
<span class="n">thread1</span><span class="o">.</span><span class="nf">start</span><span class="p">()</span>
<span class="k">let</span> <span class="nv">thread2</span> <span class="o">=</span> <span class="kt">Thread</span> <span class="p">{</span>
    <span class="nf">test2</span><span class="p">()</span>
<span class="p">}</span>
<span class="n">thread2</span><span class="o">.</span><span class="nf">start</span><span class="p">()</span></code></pre></figure>

<p><strong>Context switch</strong> - –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏. –≠—Ç–æ –¥–æ–≤–æ–ª—å–Ω–æ ¬´–¥–æ—Ä–æ–≥–æ—Å—Ç–æ—è—â–∞—è¬ª –æ–ø–µ—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã. –î–ª—è –º—å—é—Ç–µ–∫—Å–æ–≤ –µ—Å—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ. –í —Å–ª—É—á–∞–µ —Å unfair lock –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–¥–∞–≤–∞—Ç—å—Å—è —Ç–æ–º—É –ø–æ—Ç–æ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Ä–µ—Å—É—Ä—Å—É —á–∞—â–µ.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">private</span> <span class="k">var</span> <span class="nv">lock</span> <span class="o">=</span> <span class="nf">os_unfair_lock_s</span><span class="p">()</span>
<span class="kd">func</span> <span class="nf">test</span><span class="p">(</span><span class="nv">i</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
   <span class="nf">os_unfair_lock_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">)</span>
   <span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
   <span class="nf">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
   <span class="nf">os_unfair_lock_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>–¢–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ—Ç–æ–∫–∞–º–∏:<br />
<strong>Deadlock</strong> - –°–æ—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ (–ø–æ—Ç–æ–∫) –∂–¥–µ—Ç –∫–æ–≥–¥–∞ –¥—Ä—É–≥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ ¬´–æ—Ç–ø—É—Å—Ç–∏—Ç¬ª lock.  –¢.–µ. –ø–æ—Ç–æ–∫–∏ –ø—ã—Ç–∞—é—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —É–∂–µ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º, –≤ —Å–ª–µ–¥—Å—Ç–≤–∏–∏ —á–µ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–∏—Å–∞–µ—Ç.<br />
<strong>LiveLock</strong> - –¢–æ–∂–µ, —á—Ç–æ –∏ deadlock, —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã—Ö –≤ –¥–µ–π—Å—Ç–≤–∏—è—Ö –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –º–µ–Ω—è—é—Ç—Å—è, –Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç. –û–±–∞ –ø–æ—Ç–æ–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±–µ—Å–ø–æ–ª–µ–∑–Ω—É—é —Ä–∞–±–æ—Ç—É.<br />
<strong>Priority Inversion</strong> - –ù–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ—Ç–æ–∫ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Å—É—Ä—Å, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –∂–¥—É—Ç.</p>

<h3 id="–±–∏–±–ª–∏–æ—Ç–µ–∫–∞-grand-central-dispatch">–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Grand Central Dispatch</h3>

<p>–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–º–∏—Ç–∏–≤ GCD - <strong>–æ—á–µ—Ä–µ–¥—å (Queue)</strong>. –ï—Å—Ç—å –¥–≤–∞ —Ç–∏–ø–∞:</p>
<ol>
  <li><strong>Serial</strong> - –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.</li>
  <li><strong>Concurrent</strong> - –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.</li>
</ol>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">serialQueue</span> <span class="o">=</span> <span class="kt">DispatchQueue</span><span class="p">(</span><span class="nv">label</span><span class="p">:</span> <span class="err">¬´</span><span class="n">serialTest</span><span class="err">¬ª</span><span class="p">)</span>
<span class="k">let</span> <span class="nv">concurrentQueue</span> <span class="o">=</span> <span class="kt">DispatchQueue</span><span class="p">(</span><span class="nv">label</span><span class="p">:</span> <span class="err">¬´</span><span class="n">concurrentTest</span><span class="err">¬ª</span><span class="p">,</span> <span class="nv">attributes</span><span class="p">:</span> <span class="o">.</span><span class="n">concurrent</span><span class="p">)</span></code></pre></figure>

<p>–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –∏–∑ –ø—É–ª–∞ –æ—á–µ—Ä–µ–¥–µ–π. –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ global:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">globalQueue</span> <span class="o">=</span> <span class="kt">DispatchQueue</span><span class="o">.</span><span class="nf">global</span><span class="p">()</span></code></pre></figure>

<p>–í—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ - concurrent. –ö—Ä–æ–º–µ –æ—á–µ—Ä–µ–¥–∏ main:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">mainQueue</span> <span class="o">=</span> <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span></code></pre></figure>

<p><em>–í—Å–µ –∑–∞–¥–∞—á–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –Ω–∞ –æ—á–µ—Ä–µ–¥–∏ main, –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ.</em></p>

<p>–ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –º–µ—Ç–æ–¥—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –æ—á–µ—Ä–µ–¥—è–º–∏ <strong>async</strong> –∏ <strong>sync</strong>.
–í —Å–ª—É—á–∞–µ –º–µ—Ç–æ–¥–∞ async —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤—ã–∑—ã–≤–∞—é—â–µ–º—É –ø–æ—Ç–æ–∫—É:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">testConcurrent</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">concurrentQueue</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span>
        <span class="nf">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1">// this will be triggered after 'test 2'</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"test 1"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="n">concurrentQueue</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"test 2"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>–î–ª—è sync - –æ–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏.
–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –æ—Ç–ª–æ–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –µ—Å—Ç—å <strong>asyncAfter()</strong></p>

<p><strong>concurrentPerform</strong> - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Ü–∏–∫–ª. –ë–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å, –Ω–µ–∂–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å dispatchAsync –≤ —Ü–∏–∫–ª–µ for:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
	<span class="kt">DispatchQueue</span><span class="o">.</span><span class="nf">concurrentPerform</span><span class="p">(</span><span class="nv">iterations</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="nv">execute</span><span class="p">:</span> <span class="p">{</span> <span class="kt">I</span> <span class="k">in</span> 
		<span class="nf">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
	<span class="p">})</span>
<span class="p">}</span></code></pre></figure>

<p>–û—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∏—Ç–µ—Ä–∞—Ü–∏–π. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã —Å–∏—Å—Ç–µ–º—ã.</p>

<p><strong>DispatchWorkItem</strong> - –¥–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å, –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è –Ω–∞–¥ –≤—ã–ø–æ–ª–Ω—è–µ–º–æ–π –∑–∞–¥–∞—á–µ–π —Å —Ä—è–¥–æ–º —É–¥–æ–±–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">queue</span> <span class="o">=</span> <span class="kt">DispatchQueue</span><span class="p">(</span><span class="nv">label</span><span class="p">:</span> <span class="s">"test"</span><span class="p">)</span>
<span class="kd">func</span> <span class="nf">testQueue</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">queue</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span>
        <span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"test 1"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">let</span> <span class="nv">item</span> <span class="o">=</span> <span class="kt">DispatchWorkItem</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"test"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="n">queue</span><span class="o">.</span><span class="nf">async</span><span class="p">(</span><span class="nv">execute</span><span class="p">:</span> <span class="n">item</span><span class="p">)</span> <span class="c1">// –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –Ω–µ —É—Å–ø–µ–µ—Ç</span>
    <span class="n">item</span><span class="o">.</span><span class="nf">cancel</span><span class="p">()</span> <span class="c1">// –æ—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏</span>
<span class="p">}</span></code></pre></figure>

<p>–û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ(execute).</p>

<p><strong>DispatchSemaphore</strong></p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">semaphore</span> <span class="o">=</span> <span class="kt">DispatchSemaphore</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="mi">2</span><span class="p">)</span>
	<span class="c1">// –ü–µ—Ä–µ–¥–∞–≤–∞—è —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä value, –º—ã –º–æ–∂–µ–º</span>
	<span class="c1">// –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ä–µ—Å—É—Ä—Å—É. </span>
<span class="kd">func</span> <span class="nf">doWork</span><span class="p">()</span> <span class="p">{</span>
    
    <span class="n">semaphore</span><span class="o">.</span><span class="nf">wait</span><span class="p">()</span>
	<span class="c1">// –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ wait(), –∫–æ—Ç–æ—Ä—ã–π –±–ª–æ–∫–∏—Ä—É–µ—Ç –Ω–∞—à –ø–æ—Ç–æ–∫, –ø–æ–∫–∞ –≤–Ω—É—Ç—Ä–∏ –∑–∞–¥–∞—á–∏ –≤ 	// –æ—á–µ—Ä–µ–¥—å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –≤—ã–∑–æ–≤–µ—Ç—Å—è –º–µ—Ç–æ–¥ signal()</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"test"</span><span class="p">)</span>
    <span class="nf">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
    <span class="n">semaphore</span><span class="o">.</span><span class="nf">signal</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">DispatchQueue</span><span class="o">.</span><span class="nf">global</span><span class="p">()</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span>
        <span class="nf">doWork</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="kt">DispatchQueue</span><span class="o">.</span><span class="nf">global</span><span class="p">()</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span>
        <span class="nf">doWork</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="kt">DispatchQueue</span><span class="o">.</span><span class="nf">global</span><span class="p">()</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span>
        <span class="nf">doWork</span><span class="p">()</span>
    <span class="p">}</span>
	<span class="c1">// –ü—Ä–æ—Ü–µ—Å—Å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª–Ω—è—Ç—Å—è –≤ –ø–µ—Ä–≤—ã—Ö 2-—Ö —Å–ª—É—á–∞—è—Ö, –ø–æ—Ç–æ–º—É —á—Ç–æ –º—ã </span>
	<span class="c1">// —É–∫–∞–∑–∞–ª–∏ value = 2. –ö–æ–≥–¥–∞ –∂–µ 3 –ø–æ—Ç–æ–∫ –ø–æ–ø—Ä–æ–±—É–µ—Ç –µ–≥–æ –∑–∞—Ö–≤–∞—Ç–∏—Ç—å - —Ç–æ–≥–¥–∞ –±—É–¥–µ—Ç</span>
	<span class="c1">// –æ–∂–∏–¥–∞–Ω–∏–µ wait() –ø–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ—Ç–æ–∫–æ–≤.</span>
<span class="p">}</span></code></pre></figure>

<p>–î–ª—è —Å–∏—Ç—É–∞—Ü–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á, –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è <strong>DispatchGroup</strong>. –û–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –≤ –≥—Ä—É–ø–ø—ã, –∏ –∑–∞—Ç–µ–º –¥–æ–∂–∏–¥–∞—Ç—å—Å—è –ø–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –≥—Ä—É–ø–ø–µ.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">group</span> <span class="o">=</span> <span class="kt">DispatchGroup</span><span class="p">()</span>
<span class="k">let</span> <span class="nv">queue</span> <span class="o">=</span> <span class="kt">DispatchQueue</span><span class="p">(</span><span class="nv">label</span><span class="p">:</span> <span class="s">"DispatchGroupTest1"</span><span class="p">,</span> <span class="nv">attributes</span><span class="p">:</span> <span class="o">.</span><span class="n">concurrent</span><span class="p">)</span>

<span class="kd">func</span> <span class="nf">testWait</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">group</span><span class="o">.</span><span class="nf">enter</span><span class="p">()</span>
	<span class="c1">// –ú–µ—Ç–æ–¥ enter –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –º—ã ¬´–∑–∞—Ö–æ–¥–∏–º¬ª –≤ –≥—Ä—É–ø–ø—É. leave - –≤—ã—Ö–æ–¥–∏–º.</span>
    <span class="n">queue</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span>
        <span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"1"</span><span class="p">)</span>
        <span class="n">group</span><span class="o">.</span><span class="nf">leave</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="n">group</span><span class="o">.</span><span class="nf">enter</span><span class="p">()</span>
    <span class="n">queue</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span>
        <span class="nf">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"2"</span><span class="p">)</span>
        <span class="n">group</span><span class="o">.</span><span class="nf">leave</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="n">group</span><span class="o">.</span><span class="nf">wait</span><span class="p">()</span>
	<span class="c1">// –ú–µ—Ç–æ–¥ wait –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ–∫–∞ –≤—Å–µ –∑–∞–¥–∞—á–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –≤ –≥—Ä—É–ø–ø—É, –ø–µ—Ä–µ–¥ 	</span>
	<span class="c1">// –∫–æ—Ç–æ—Ä—ã–º–∏ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ enter, –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∏ –Ω–µ </span>
	<span class="c1">// –≤—ã–∑–≤–∞–ª–∏ –º–µ—Ç–æ–¥ leave –≤—ã–∑—ã–≤–∞—é—â–∏–π –ø–æ—Ç–æ–∫ –±—É–¥–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è.</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"finished"</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>–ß—Ç–æ –±—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å read-write lock –≤ GCD –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è <strong>Barrier Block</strong>. –û–Ω –∂–¥–µ—Ç –ø–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ –±–ª–æ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –∫–æ–¥–∞ –∏ —Å—Ç–∞–≤–∏—Ç –±–ª–æ–∫ –Ω–∞ –æ—á–µ—Ä–µ–¥—å –ø–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Å–∞–º, –¥–∞–ª–µ–µ –º–æ–≥—É—Ç –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è –±–ª–æ–∫–∏ –ø–æ—Å–ª–µ –Ω–µ–≥–æ.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">queue</span> <span class="o">=</span> <span class="kt">DispatchQueue</span><span class="p">(</span><span class="nv">label</span><span class="p">:</span> <span class="s">"DispatchBarrierTest"</span><span class="p">,</span> <span class="nv">attributes</span><span class="p">:</span> <span class="o">.</span><span class="n">concurrent</span><span class="p">)</span>
<span class="k">var</span> <span class="nv">internalTest</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>
<span class="kd">func</span> <span class="nf">setTest</span><span class="p">(</span><span class="n">_</span> <span class="nv">test</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">queue</span><span class="o">.</span><span class="nf">async</span><span class="p">(</span><span class="nv">flags</span><span class="p">:</span> <span class="o">.</span><span class="n">barrier</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">internalTest</span> <span class="o">=</span> <span class="n">test</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">test</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">tmp</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">queue</span><span class="o">.</span><span class="n">sync</span> <span class="p">{</span>
        <span class="n">tmp</span> <span class="o">=</span> <span class="n">internalTest</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">tmp</span>
<span class="p">}</span></code></pre></figure>

<p>–ü—Ä–∏ —Ç–∞–∫–æ–º –ø–æ–¥—Ö–æ–¥–µ —Ä–µ—Å—É—Ä—Å –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–ø–∏—Å—å.</p>

<p><strong>DisptachSource</strong> - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏–ø GCD, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏. –ï—Å—Ç—å 4—Ä–µ –≤–∏–¥–∞:</p>
<ol>
  <li>Timer dispatch source - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</li>
  <li>Signal dispatch source - –æ–ø–æ–≤–µ—â–∞–µ—Ç –æ –ø—Ä–∏—Ö–æ–¥–µ unix —Å–∏–≥–Ω–∞–ª–æ–≤</li>
  <li>Descriptor dispatch source - –æ–ø–æ–≤–µ—â–∞–µ—Ç —á—Ç–æ —Å —Ñ–∞–π–ª–æ–º –±—ã–ª–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–Ω—ã–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</li>
  <li>Process dispatch source - –æ–ø–æ–≤–µ—â–∞–µ—Ç –æ —Å–æ–±—ã—Ç–∏—è—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞</li>
</ol>

<p>–í—Å–µ dispatchSource –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞—é—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏.</p>

<p>–ß—Ç–æ –±—ã —Å–æ–∫—Ä–∞—Ç–∏—Å—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –µ—Å—Ç—å <strong>targetQueue</strong>.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">targetQueue</span> <span class="o">=</span> <span class="kt">DispatchQueue</span><span class="p">(</span><span class="nv">label</span><span class="p">:</span> <span class="s">"TargetQueue"</span><span class="p">)</span>
<span class="kd">func</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">queue1</span> <span class="o">=</span> <span class="kt">DispatchQueue</span><span class="p">(</span><span class="nv">label</span><span class="p">:</span> <span class="s">"Queue1"</span><span class="p">,</span> <span class="nv">target</span><span class="p">:</span> <span class="n">targetQueue</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">dispatchSource1</span> <span class="o">=</span> <span class="kt">DispatchSource</span><span class="o">.</span><span class="nf">makeTimerSource</span><span class="p">(</span><span class="nv">queue</span><span class="p">:</span> <span class="n">queue1</span><span class="p">)</span>
    <span class="n">dispatchSource1</span><span class="o">.</span><span class="n">setEventHandler</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"test1"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="n">dispatchSource1</span><span class="o">.</span><span class="nf">schedule</span><span class="p">(</span><span class="nv">deadline</span><span class="p">:</span> <span class="o">.</span><span class="nf">now</span><span class="p">(),</span> <span class="nv">repeating</span><span class="p">:</span> <span class="mi">2</span><span class="p">)</span>
    <span class="n">dispatchSource1</span><span class="o">.</span><span class="nf">activate</span><span class="p">()</span>
<span class="p">}</span></code></pre></figure>

<p>TargetQueue –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å serial, –ø—Ä–∏ concurrent –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤ –Ω–µ –∏–∑–±–µ–∂–∞—Ç—å.</p>

<p><strong>DisptachIO</strong> - API –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π.</p>

<h3 id="operation">Operation</h3>

<p>–ù–∞—Å–ª–µ–¥–Ω–∏–∫–æ–º –∫–ª–∞—Å—Å–∞ <strong>OperationQueue()</strong> —è–≤–ª—è–µ—Ç—Å—è <strong>BlockOperation</strong>:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">operationQueue</span> <span class="o">=</span> <span class="kt">OperationQueue</span><span class="p">()</span>
<span class="kd">func</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">blockOperation</span> <span class="o">=</span> <span class="kt">BlockOperation</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"test"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="n">operationQueue</span><span class="o">.</span><span class="nf">addOperation</span><span class="p">(</span><span class="n">blockOperation</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p><em>–ö–∞–∫ —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º (addOperation) –æ–ø–µ—Ä–∞—Ü–∏—é, –æ–Ω–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.</em></p>

<p>–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª Operation</p>
<ul>
  <li>isReady –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å–≤–æ–π—Å—Ç–≤–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ true). –°–≤–æ–π—Å—Ç–≤–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ false, –µ—Å–ª–∏ –∑–∞–≤–∏—Å–∏–º—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å. –û–±—ã—á–Ω–æ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä—è–º–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —ç—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ. –ï—Å–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–µ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–≤–∏—Å–∏–º—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—é isReady –∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.</li>
  <li>isExecuting –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. True –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, false –µ—Å–ª–∏ –Ω–µ—Ç. –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç–µ –º–µ—Ç–æ–¥ start, –≤—ã —Ç–∞–∫–∂–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å isExecuting –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å kvo –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è.</li>
  <li>isFinished –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–∫–∞ —Å–≤–æ–π—Å—Ç–≤–æ –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ false, –æ–ø–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ operation queue. –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç–µ –º–µ—Ç–æ–¥ start, –≤—ã —Ç–∞–∫–∂–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å isFinished –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å kvo –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –≤–∞—à–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.</li>
  <li>isCancelled –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–± –æ—Ç–º–µ–Ω–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã –¥–æ–ª–∂–Ω—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.</li>
</ul>

<p>–ú–µ—Ç–æ–¥—ã:
<strong>start()</strong> - –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
<strong>main()</strong> - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª</p>

<p><strong>OperationQueue</strong> - –æ—á–µ—Ä–µ–¥—å FIFO.  –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">operationQueue</span> <span class="o">=</span> <span class="kt">OperationQueue</span><span class="p">()</span>
<span class="kd">class</span> <span class="kt">OperationA</span><span class="p">:</span> <span class="kt">Operation</span> <span class="p">{</span> <span class="c1">// –ø—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π operation </span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"test"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">testOperation</span> <span class="o">=</span> <span class="kt">OperationA</span><span class="p">()</span>
    <span class="n">operationQueue</span><span class="o">.</span><span class="nf">addOperation</span><span class="p">(</span><span class="n">testOperation</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p><em>–†–∞–±–æ—Ç–∞—è –±–µ–∑ operationQueue, –æ–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π.</em>
–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –ø–æ—Ç–æ–∫–∞, –æ—Ç–∫—É–¥–∞ –≤—ã–∑–≤–∞–ª–∏ –º–µ—Ç–æ–¥ start()
–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é, –≥–¥–µ —Å–∞–º–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
–ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ isAsynchronous, isFinished –∏ isExecuting</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">class</span> <span class="kt">AsyncOperation</span><span class="p">:</span> <span class="kt">Operation</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="k">var</span> <span class="nv">finish</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="kd">private</span> <span class="k">var</span> <span class="nv">execute</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">queue</span> <span class="o">=</span> <span class="kt">DispatchQueue</span><span class="p">(</span><span class="nv">label</span><span class="p">:</span> <span class="s">"AsyncOperation"</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="k">var</span> <span class="nv">isAsynchronous</span><span class="p">:</span> <span class="kt">Bool</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">true</span> <span class="p">}</span>
    <span class="k">override</span> <span class="k">var</span> <span class="nv">isFinished</span><span class="p">:</span> <span class="kt">Bool</span> <span class="p">{</span> <span class="k">return</span> <span class="n">finish</span> <span class="p">}</span>
    <span class="k">override</span> <span class="k">var</span> <span class="nv">isExecuting</span><span class="p">:</span> <span class="kt">Bool</span> <span class="p">{</span> <span class="k">return</span> <span class="n">execute</span> <span class="p">}</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">start</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">queue</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="nf">main</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="n">execute</span> <span class="o">=</span> <span class="kc">true</span>
    <span class="p">}</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"test"</span><span class="p">)</span>
        <span class="n">finish</span> <span class="o">=</span> <span class="kc">true</span>
        <span class="n">execute</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>–°–≤–æ–π—Å—Ç–≤–æ OperationQueue <strong>maxConcurrentOperationCount</strong> –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–ª-–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="n">operationQueue</span><span class="o">.</span><span class="n">maxConcurrentOperationCount</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">operationQueue</span><span class="o">.</span><span class="n">addOperation</span> <span class="p">{</span> <span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="nf">print</span><span class="p">(</span><span class="err">¬´</span><span class="n">test1</span><span class="err">¬ª</span><span class="p">)</span> <span class="p">}</span>
<span class="n">operationQueue</span><span class="o">.</span><span class="n">addOperation</span> <span class="p">{</span> <span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="nf">print</span><span class="p">(</span><span class="err">¬´</span><span class="n">test2</span><span class="err">¬ª</span><span class="p">)</span> <span class="p">}</span>
<span class="n">operationQueue</span><span class="o">.</span><span class="n">addOperation</span> <span class="p">{</span> <span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="nf">print</span><span class="p">(</span><span class="err">¬´</span><span class="n">test3</span><span class="err">¬ª</span><span class="p">)</span> <span class="p">}</span></code></pre></figure>

<p>–¢.–µ. –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ 1 –æ–ø–µ—Ä–∞—Ü–∏—è. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –ø–æ–π–¥–µ—Ç –≤—Ç–æ—Ä–∞—è, –∏ —Ç–¥.</p>

<p>–ï—â–µ –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–∞–¥ GCD —è–≤–ª—è–µ—Ç—Å—è <strong>Dependencies</strong>.
–û–Ω–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">operationQueue</span> <span class="o">=</span> <span class="kt">OperationQueue</span><span class="p">()</span>
<span class="k">let</span> <span class="nv">operation1</span> <span class="o">=</span> <span class="kt">BlockOperation</span> <span class="p">{</span> <span class="nf">print</span><span class="p">(</span><span class="s">"test1"</span><span class="p">)</span> <span class="p">}</span>
<span class="k">let</span> <span class="nv">operation2</span> <span class="o">=</span> <span class="kt">BlockOperation</span> <span class="p">{</span> <span class="nf">print</span><span class="p">(</span><span class="s">"test2"</span><span class="p">)</span> <span class="p">}</span>
<span class="k">let</span> <span class="nv">operation3</span> <span class="o">=</span> <span class="kt">BlockOperation</span> <span class="p">{</span> <span class="nf">print</span><span class="p">(</span><span class="s">"test3"</span><span class="p">)</span> <span class="p">}</span>
<span class="n">operation3</span><span class="o">.</span><span class="nf">addDependency</span><span class="p">(</span><span class="n">operation2</span><span class="p">)</span>
<span class="n">operationQueue</span><span class="o">.</span><span class="nf">addOperations</span><span class="p">([</span><span class="n">operation1</span><span class="p">,</span> <span class="n">operation2</span><span class="p">,</span> <span class="n">operation3</span><span class="p">],</span> <span class="nv">waitUntilFinished</span><span class="p">:</span> <span class="kc">false</span><span class="p">)</span> <span class="c1">// –º–µ—Ç–æ–¥ waitUntil</span></code></pre></figure>

<p>–ú–µ—Ç–æ–¥ waitUntil –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–∑—ã–≤–∞—é—â–∏–π –ø–æ—Ç–æ–∫, –ø–æ–∫–∞ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ operationQueue –Ω–µ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.
–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω –∫–∞–∫:
operationQueue.watiUntilAllOperationsAreFinished()</p>

<p><strong>CompletionBlock</strong> - –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">let</span> <span class="nv">operation</span> <span class="o">=</span> <span class="kt">BlockOperation</span> <span class="p">{</span> <span class="nf">print</span><span class="p">(</span><span class="err">¬´</span><span class="n">test</span><span class="err">¬ª</span><span class="p">)</span> <span class="p">}</span>
	<span class="n">operation</span><span class="o">.</span><span class="n">completionBlock</span> <span class="o">=</span> <span class="p">{</span> <span class="nf">print</span><span class="p">(</span><span class="err">¬´</span><span class="n">finished</span><span class="err">¬ª</span><span class="p">)</span> <span class="p">}</span>
	<span class="n">operationQueue</span><span class="o">.</span><span class="nf">addOperation</span><span class="p">(</span><span class="n">operation</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p><strong>isSuspended</strong> –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ operationQueue.
operationQueue.isSuspended = true
–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–µ —Å—Ä–∞–∑—É. –û—á–µ—Ä–µ–¥—å –¥–æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–∫–∞ –Ω–µ —Ç–µ–∫—É—â–∞—è –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.</p>

<h3 id="gcd-vs-operation">GCD vs OPERATION</h3>

<p>Operation - –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º GCD. –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è.
	–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: Cancelation, Observable, Dependencies
GDC - –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –ø—Ä–∏–º–∏—Ç–∏–≤.
	–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: –ü—Ä–æ—Å—Ç–æ—Ç–∞, –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ—Å—Ç—å.</p>

:ET